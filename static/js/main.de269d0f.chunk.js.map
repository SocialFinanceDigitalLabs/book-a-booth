{"version":3,"sources":["styles/theme.js","utils/NavigationClient.js","ui-components/WelcomeName.jsx","authConfig.js","ui-components/SignInButton.jsx","ui-components/AccountPicker.jsx","ui-components/SignOutButton.jsx","ui-components/SignInSignOutButton.jsx","styles/useStyles.js","ui-components/NavBar.jsx","ui-components/PageLayout.jsx","pages/Logout.jsx","ui-components/calendar/CalendarData.jsx","ui-components/Loading.jsx","ui-components/ErrorComponent.jsx","utils/MSALSetup.js","utils/MsGraphApiCall.js","utils/CalendarDataUtil.js","utils/CalendarService.js","pages/Calendar.jsx","App.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","CustomNavigationClient","history","url","options","a","relativePath","replace","window","location","origin","noHistory","this","push","NavigationClient","WelcomeName","instance","useMsal","useState","name","setName","activeAccount","getActiveAccount","useEffect","split","Typography","variant","ua","navigator","userAgent","msie","indexOf","msie11","msedge","firefox","msalConfig","auth","clientId","authority","redirectUri","process","postLogoutRedirectUri","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","message","containsPii","LogLevel","Error","console","Info","info","Verbose","debug","Warning","warn","loginRequest","scopes","graphConfig","SignInButton","anchorEl","setAnchorEl","open","Boolean","handleLogin","loginType","loginPopup","loginRedirect","Button","onClick","event","currentTarget","color","Menu","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","AccountPicker","props","accounts","handleListItemClick","account","setActiveAccount","reload","prompt","Dialog","aria-labelledby","DialogTitle","List","map","ListItem","button","ListItemAvatar","Avatar","ListItemText","username","homeAccountId","autoFocus","SignOutButton","accountSelectorOpen","setOpen","IconButton","logoutType","logoutPopup","logoutRedirect","SignInSignOutButton","inProgress","useIsAuthenticated","InteractionStatus","Startup","HandleRedirect","useStyles","makeStyles","root","flexGrow","menuButton","marginRight","spacing","title","textDecoration","bookingCell","backgroundColor","grey","display","flexDirection","width","NavBar","classes","className","AppBar","position","Toolbar","Link","component","RouterLink","to","PageLayout","children","Logout","onRedirectNavigate","BrowserUtils","isInIframe","availableColors","CalendarData","calendarService","bookClick","deleteEventClick","dates","boothData","calendarData","calendarView","useMemo","datesIndexes","timeslotIndex","time","intervals","days","dateIndex","timeslot","start","available","filter","e","log","TableContainer","Paper","Table","sx","minWidth","size","TableHead","TableRow","TableCell","d","align","dayjs","unix","noon","format","TableBody","row","rowIndex","borderBottom","borderRight","scope","day","CalendarCell","mode","setMode","myBookClick","useCallback","duration","result","click","length","onCancel","BookedCell","clicked","setClicked","deleteRequested","setDeleteRequested","subject","AvailabilityCell","Icon","SentimentVeryDissatisfiedIcon","SentimentNeutralIcon","SentimentVerySatisfiedIcon","BookingCell","booking","setBooking","book","then","Loading","ErrorComponent","errorCode","msalInstance","PublicClientApplication","getAllAccounts","enableAccountStorageEvents","addEventCallback","eventType","EventType","LOGIN_SUCCESS","payload","msalInit","callMsGraphIter","opts","callMsGraph","json","values","value","acquireTokenSilent","response","headers","Headers","bearer","accessToken","append","method","fetchUrl","startsWith","fetch","catch","MSALErrorHandler","InteractionRequiredAuthError","acquireTokenRedirect","timeFormat","timeFormatNoTz","calendarTimeZone","zoomBooths","n","interval","extend","utc","timezone","getNextWorkingday","date","dayOfWeek","add","transformBoothData","data","availabilityView","occupied","ix","reduce","pv","cv","ci","parseInt","findBooths","booths","attendees","address","emailAddress","toLowerCase","acceptedBooths","status","enrichCalendarData","startTime","tz","dateTime","timeZone","endTime","end","startIndex","Math","floor","endIndex","ceil","arr","i","useCalendarService","startDate","setDates","useApiData","loadBoothData","updateBoothData","loadCalendarData","updateCalendarData","nextDay","hour","minute","second","numDays","intervalCount","Array","fill","el","v","getDatePeriod","refresh","callback","deps","setData","body","schedules","availabilityViewInterval","round","JSON","stringify","encodeURIComponent","bookBooth","queryBody","boothResponse","availableBooths","selectedBooth","random","boothId","scheduleId","boothName","boothNumber","bookingResult","bookingData","cancelEvent","eventId","CalendarContent","useQueryParam","StringParam","narrow","useMediaQuery","timeoutId","setTimeout","clearTimeout","Calendar","authRequest","interactionType","InteractionType","Redirect","authenticationRequest","errorComponent","loadingComponent","Pages","path","App","pca","useHistory","navigationClient","setNavigationClient","Grid","container","justifyContent","ReactDOM","render","StrictMode","CssBaseline","ThemeProvider","ReactRouterRoute","Route","document","getElementById"],"mappings":"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","file":"static/js/main.de269d0f.chunk.js","sourcesContent":["import { unstable_createMuiStrictModeTheme as createMuiTheme } from '@mui/material/styles';\nimport red from '@mui/material/colors/red';\n\n// Create a theme instance.\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n","import { NavigationClient } from \"@azure/msal-browser\";\n\n/**\n * This is an example for overriding the default function MSAL uses to navigate to other urls in your webpage\n */\nexport class CustomNavigationClient extends NavigationClient{\n    constructor(history) {\n        super();\n        this.history = history;\n    }\n\n    /**\n     * Navigates to other pages within the same web application\n     * You can use the useHistory hook provided by react-router-dom to take advantage of client-side routing\n     * @param url \n     * @param options \n     */\n    async navigateInternal(url, options) {\n        const relativePath = url.replace(window.location.origin, '');\n        if (options.noHistory) {\n            this.history.replace(relativePath);\n        } else {\n            this.history.push(relativePath);\n        }\n\n        return false;\n    }\n}\n","import { useEffect, useState } from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport Typography from \"@mui/material/Typography\";\n\nconst WelcomeName = () => {\n    const { instance } = useMsal();\n    const [name, setName] = useState(null);\n\n    const activeAccount = instance.getActiveAccount();\n    useEffect(() => {\n        if (activeAccount) {\n            setName(activeAccount.name.split(' ')[0]);\n        } else {\n            setName(null);\n        }\n    }, [activeAccount]);\n\n    if (name) {\n        return <Typography variant=\"h6\">Welcome, {name}</Typography>;\n    } else {\n        return null;\n    }\n};\n\nexport default WelcomeName;","import { LogLevel } from \"@azure/msal-browser\";\n// Browser check variables\n// If you support IE, our recommendation is that you sign-in using Redirect APIs\n// If you as a developer are testing using Edge InPrivate mode, please add \"isEdge\" to the if check\nconst ua = window.navigator.userAgent;\nconst msie = ua.indexOf(\"MSIE \");\nconst msie11 = ua.indexOf(\"Trident/\");\nconst msedge = ua.indexOf(\"Edge/\");\nconst firefox = ua.indexOf(\"Firefox\");\nconst isIE = msie > 0 || msie11 > 0;\nconst isEdge = msedge > 0;\nconst isFirefox = firefox > 0; // Only needed if you need to support the redirect flow in Firefox incognito\n\n// Config object to be passed to Msal on creation\nexport const msalConfig = {\n    auth: {\n        clientId: \"36bc0775-9527-484c-9c48-2e846090732b\",\n        authority: \"https://login.microsoftonline.com/9c85420c-07ed-40e7-9c4c-4207556dc906\",\n        redirectUri: process.env.PUBLIC_URL,\n        postLogoutRedirectUri: process.env.PUBLIC_URL\n    },\n    cache: {\n        cacheLocation: \"localStorage\",\n        storeAuthStateInCookie: isIE || isEdge || isFirefox\n    },\n    system: {\n        loggerOptions: {\n            loggerCallback: (level, message, containsPii) => {\n                if (containsPii) {\t\n                    return;\t\n                }\n                switch (level) {\t\n                    case LogLevel.Error:\t\n                        console.error(message);\t\n                        return;\t\n                    case LogLevel.Info:\t\n                        console.info(message);\t\n                        return;\t\n                    case LogLevel.Verbose:\t\n                        console.debug(message);\t\n                        return;\t\n                    case LogLevel.Warning:\t\n                        console.warn(message);\t\n                        return;\t\n                    default:\n                        return;\n                }\n            }\n        }\n    }\n};\n\n// Add here scopes for id token to be used at MS Identity Platform endpoints.\nexport const loginRequest = {\n    scopes: [\"User.Read\", \"Calendars.ReadWrite\"]\n};\n\n// Add here the endpoints for MS Graph API services you would like to use.\nexport const graphConfig = {\n    apiBase: \"https://graph.microsoft.com/v1.0\",\n    graphMeEndpoint: \"https://graph.microsoft.com/v1.0/me\"\n};\n","import { useState } from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport Button from \"@mui/material/Button\";\nimport MenuItem from '@mui/material/MenuItem';\nimport Menu from '@mui/material/Menu';\nimport { loginRequest } from \"../authConfig\";\n\nexport const SignInButton = () => {\n    const { instance } = useMsal();\n\n    const [anchorEl, setAnchorEl] = useState(null);\n    const open = Boolean(anchorEl);\n\n    const handleLogin = (loginType) => {\n        setAnchorEl(null);\n\n        if (loginType === \"popup\") {\n            instance.loginPopup(loginRequest);\n        } else if (loginType === \"redirect\") {\n            instance.loginRedirect(loginRequest);\n        }\n    }\n\n    return (\n        <div>\n            <Button\n                onClick={(event) => setAnchorEl(event.currentTarget)}\n                color=\"inherit\"\n            >\n                Login\n            </Button>\n            <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n                }}\n                keepMounted\n                transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n                }}\n                open={open}\n                onClose={() => setAnchorEl(null)}\n            >\n                <MenuItem onClick={() => handleLogin(\"popup\")} key=\"loginPopup\">Sign in using Popup</MenuItem>\n                <MenuItem onClick={() => handleLogin(\"redirect\")} key=\"loginRedirect\">Sign in using Redirect</MenuItem>\n            </Menu>\n        </div>\n    )\n};","import React from 'react';\nimport { useMsal } from \"@azure/msal-react\";\nimport Avatar from '@mui/material/Avatar';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemText from '@mui/material/ListItemText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Dialog from '@mui/material/Dialog';\nimport PersonIcon from '@mui/icons-material/Person';\nimport AddIcon from '@mui/icons-material/Add';\nimport { loginRequest } from \"../authConfig\";\n\nexport const AccountPicker = (props) => {\n    const { instance, accounts } = useMsal();\n    const { onClose, open } = props;\n\n    const handleListItemClick = (account) => {\n        instance.setActiveAccount(account);\n        if (!account) {\n            instance.loginRedirect({\n                ...loginRequest,\n                prompt: \"login\"\n            })\n        } else {\n            // To ensure account related page attributes update after the account is changed\n            window.location.reload();\n        }\n\n        onClose(account);\n    };\n\n    return (\n        <Dialog onClose={onClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n          <DialogTitle id=\"simple-dialog-title\">Set active account</DialogTitle>\n          <List>\n            {accounts.map((account) => (\n              <ListItem button onClick={() => handleListItemClick(account)} key={account.homeAccountId}>\n                <ListItemAvatar>\n                  <Avatar>\n                    <PersonIcon />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText primary={account.name} secondary={account.username} />\n              </ListItem>\n            ))}\n    \n            <ListItem autoFocus button onClick={() => handleListItemClick(null)}>\n              <ListItemAvatar>\n                <Avatar>\n                  <AddIcon />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary=\"Add account\" />\n            </ListItem>\n          </List>\n        </Dialog>\n      );\n};","import { useState } from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport IconButton from '@mui/material/IconButton';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport MenuItem from '@mui/material/MenuItem';\nimport Menu from '@mui/material/Menu';\nimport { AccountPicker } from \"./AccountPicker\";\n\nexport const SignOutButton = () => {\n    const { instance } = useMsal();\n    const [accountSelectorOpen, setOpen] = useState(false);\n\n    const [anchorEl, setAnchorEl] = useState(null);\n    const open = Boolean(anchorEl);\n\n    const handleLogout = (logoutType) => {\n        setAnchorEl(null);\n\n        if (logoutType === \"popup\") {\n            instance.logoutPopup();\n        } else if (logoutType === \"redirect\") {\n            instance.logoutRedirect();\n        }\n    }\n\n    const handleAccountSelection = () => {\n        setAnchorEl(null);\n        setOpen(true);\n    }\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div>\n            <IconButton\n                onClick={(event) => setAnchorEl(event.currentTarget)}\n                color=\"inherit\"\n            >\n                <AccountCircle />\n            </IconButton>\n            <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n                }}\n                keepMounted\n                transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n                }}\n                open={open}\n                onClose={() => setAnchorEl(null)}\n            >\n                <MenuItem onClick={() => handleAccountSelection()} key=\"switchAccount\">Switch Account</MenuItem>\n                <MenuItem onClick={() => handleLogout(\"redirect\")} key=\"logoutRedirect\">Logout using Redirect</MenuItem>\n            </Menu>\n            <AccountPicker open={accountSelectorOpen} onClose={handleClose} />\n        </div>\n    )\n};","import { useIsAuthenticated, useMsal } from \"@azure/msal-react\";\nimport { SignInButton } from \"./SignInButton\";\nimport { SignOutButton } from \"./SignOutButton\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n\nconst SignInSignOutButton = () => {\n    const { inProgress } = useMsal();\n    const isAuthenticated = useIsAuthenticated();\n\n    if (isAuthenticated) {\n        return <SignOutButton />;\n    } else if (inProgress !== InteractionStatus.Startup && inProgress !== InteractionStatus.HandleRedirect) {\n        // inProgress check prevents sign-in button from being displayed briefly after returning from a redirect sign-in. Processing the server response takes a render cycle or two\n        return <SignInButton />;\n    } else {\n        return null;\n    }\n}\n\nexport default SignInSignOutButton;","import { makeStyles } from '@mui/styles';\nimport {grey} from \"@mui/material/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n      '& a': {\n          textDecoration: 'none',\n      },\n    },\n    bookingCell: {\n        backgroundColor: grey.A400,\n        \"& div\": {\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"100%\",\n        }\n    }\n}));\n\nexport default useStyles;","import {AppBar, Toolbar, Link, Typography} from \"@mui/material\";\nimport WelcomeName from \"./WelcomeName\";\nimport SignInSignOutButton from \"./SignInSignOutButton\";\nimport useStyles from \"../styles/useStyles\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nconst NavBar = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n            <Toolbar>\n                <Typography className={classes.title}>\n                    <Link component={RouterLink} to=\"/\" color=\"inherit\" variant=\"h6\">SF Booth Booking</Link>\n                </Typography>\n                <WelcomeName />\n                <SignInSignOutButton />\n            </Toolbar>\n            </AppBar>\n        </div>\n    );\n};\n\nexport default NavBar;","import NavBar from \"./NavBar\";\n\nexport const PageLayout = (props) => {\n    return (\n        <>\n            <NavBar />\n            <br/>\n            <br/>\n            {props.children}\n        </>\n    );\n};","import React, { useEffect } from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { BrowserUtils } from \"@azure/msal-browser\";\n\nexport function Logout() {\n    const { instance } = useMsal();\n\n    useEffect(() => {\n        instance.logoutRedirect({\n            account: instance.getActiveAccount(),\n            onRedirectNavigate: () => !BrowserUtils.isInIframe()\n        })\n    }, [ instance ]);\n\n    return (\n        <div>Logout</div>\n    )\n}\n","import React, {useCallback, useMemo, useState} from \"react\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport Table from \"@mui/material/Table\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableCell from \"@mui/material/TableCell\";\nimport Paper from \"@mui/material/Paper\";\nimport SentimentVeryDissatisfiedIcon from '@mui/icons-material/SentimentVeryDissatisfied';\nimport SentimentNeutralIcon from '@mui/icons-material/SentimentNeutral';\nimport SentimentVerySatisfiedIcon from '@mui/icons-material/SentimentVerySatisfied';\nimport Button from \"@mui/material/Button\";\nimport dayjs from \"dayjs\";\nimport {Typography} from \"@mui/material\";\nimport useStyles from \"../../styles/useStyles\";\n\nconst availableColors = [\n    \"#EF9A9A\",\n    \"#FFCC80\",\n    \"#FFF59D\",\n]\n\n\nconst CalendarData = ({calendarService, bookClick, deleteEventClick}) => {\n    const {dates, boothData, calendarData} = calendarService;\n    const calendarView = useMemo(() => {\n        if (dates && dates.datesIndexes) {\n            return dates.datesIndexes[0].map(timeslotIndex => {\n                return {\n                    time: dates.intervals[timeslotIndex],\n                    days: dates.datesIndexes.map(dateIndex => {\n                        const timeslot = dateIndex[timeslotIndex];\n                        return {\n                            timeslot,\n                            start: dates.intervals[timeslot],\n                            available: boothData ? boothData.available[timeslot] : -1,\n                            event: calendarData ? calendarData.filter(e => e.id === calendarData.intervals[timeslot]) : [],\n                        }\n                    })\n                };\n            })\n        } else {\n            return [];\n        }\n    }, [dates, boothData, calendarData])\n\n    console.log(calendarView)\n    return (\n        <TableContainer component={Paper}>\n            <Table sx={{ minWidth: 250 }} size=\"small\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Time</TableCell>\n                        {dates.dates.map(d =>\n                            <TableCell key={d.noon} align=\"center\">\n                                {dayjs.unix(d.noon).format(\"ddd, D MMM\")}\n                            </TableCell>\n                        )}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {calendarView.map((row, rowIndex) => {\n                        const borderBottom = rowIndex % 2 === 0 ? 0 : '1px solid #eee';\n                        return (\n                            <TableRow\n                                key={row.time}\n                                sx={{\n                                    'td,th': { borderBottom, borderRight: '1px solid #eee' },\n                                    '&:last-child td, &:last-child th': { borderBottom: 0 }\n                                }}\n                                >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    { dayjs.unix(row.time).format(\"HH:mm\") }\n                                </TableCell>\n                                { row.days.map(day => <CalendarCell\n                                    key={day.timeslot} day={day} bookClick={bookClick}\n                                    deleteEventClick={deleteEventClick}\n                                />) }\n                            </TableRow>\n                        )})}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )};\nexport default CalendarData;\n\nconst CalendarCell = ({day, bookClick, deleteEventClick}) => {\n    const [mode, setMode] = useState(\"normal\")\n\n    const myBookClick = useCallback(async (time, duration) => {\n        const result = await bookClick(time, duration);\n        setMode(\"normal\");\n        return result;\n    }, [bookClick])\n\n    const click = useCallback(() => {\n        if (mode === \"normal\") {\n            setMode(\"selected\")\n        }\n    }, [mode]);\n\n    if (day.event && day.event.length > 0) {\n        return <BookedCell day={day} deleteEventClick={deleteEventClick} />\n    } else if (mode === \"normal\") {\n        return <AvailabilityCell day={day} onClick={click} />\n    } else {\n        return <BookingCell day={day} onCancel={() => setMode(\"normal\")} bookClick={myBookClick} align=\"center\"/>\n    }\n}\n\nconst BookedCell = ({day, deleteEventClick}) => {\n    const classes = useStyles();\n    const [clicked, setClicked] = useState(false);\n    const [deleteRequested, setDeleteRequested] = useState(false);\n    if (clicked) {\n        return (\n            <TableCell align=\"center\"  className={classes.bookingCell}>\n                <div>\n                    <Button variant=\"contained\" color=\"error\" onClick={() => {\n                        setDeleteRequested(true);\n                        setClicked(false);\n                        deleteEventClick(day.event[0].id)\n                    }}>\n                        Cancel {day.event[0].subject}\n                    </Button>\n                    <Button variant=\"outlined\"  onClick={() => setClicked(false)}>Leave as is</Button>\n                </div>\n            </TableCell>\n        )\n    }\n    return (\n        <TableCell align=\"center\" onClick={() => setClicked(true)}>\n            { deleteRequested && \"Cancelling \"}\n            {day.event[0].subject}\n        </TableCell>\n    )\n}\n\nconst AvailabilityCell = ({day, onClick}) => {\n    const backgroundColor = day.available >= availableColors.length ? \"#A5D6A7\" : availableColors[day.available];\n    let Icon;\n    if (day.available === 0) {\n        Icon = SentimentVeryDissatisfiedIcon;\n    } else if (day.available <= 2) {\n        Icon = SentimentNeutralIcon;\n    } else {\n        Icon = SentimentVerySatisfiedIcon;\n    }\n    return (\n        <TableCell sx={{backgroundColor}} align=\"center\" onClick={onClick}>\n            <Icon />\n        </TableCell>\n    );\n};\n\nconst BookingCell = ({day, onCancel, bookClick}) => {\n    const classes = useStyles();\n    const [booking, setBooking] = useState(false);\n    const book = useCallback((duration) => {\n        setBooking(true);\n        bookClick(day.start, duration).then(result =>\n            setBooking(false)\n        )}, [day, bookClick])\n\n    if (booking) {\n        return (\n            <TableCell align=\"center\" className={classes.bookingCell}>\n                Sending Booking Request...\n            </TableCell>\n        )\n    }\n\n    return (\n        <TableCell align=\"center\" className={classes.bookingCell}>\n            <div>\n                <Typography>Book Booth</Typography>\n                <Button variant=\"outlined\" onClick={() => book(30)}>30 min</Button>\n                <Button variant=\"outlined\" onClick={() => book(60)}>60 min</Button>\n                <Button variant=\"outlined\" onClick={() => book(90)}>90 min</Button>\n                <Button variant=\"outlined\" onClick={() => book(120)}>120 min</Button>\n                <Button variant=\"contained\" onClick={onCancel} >Cancel</Button>\n            </div>\n        </TableCell>\n    );\n};\n","import {Typography} from \"@mui/material\";\n\nexport const Loading = () => {\n    return <Typography variant=\"h6\">Authentication in progress...</Typography>\n}","import { Typography } from \"@mui/material\";\n\nexport const ErrorComponent = ({error}) => {\n    return <Typography variant=\"h6\">An Error Occurred: {error.errorCode}</Typography>;\n}","// MSAL imports\nimport { PublicClientApplication, EventType } from \"@azure/msal-browser\";\nimport { msalConfig } from \"../authConfig\";\n\nconst msalInit = () => {\n    const msalInstance = new PublicClientApplication(msalConfig);\n\n    // Default to using the first account if no account is active on page load\n    if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\n        // Account selection logic is app dependent. Adjust as needed for different use cases.\n        msalInstance.setActiveAccount(msalInstance.getAllAccounts()[0]);\n    }\n\n    // Optional - This will update account state if a user signs in from another tab or window\n    msalInstance.enableAccountStorageEvents();\n\n    msalInstance.addEventCallback((event) => {\n        if (event.eventType === EventType.LOGIN_SUCCESS && event.payload.account) {\n            const account = event.payload.account;\n            msalInstance.setActiveAccount(account);\n        }\n    });\n    return msalInstance;\n}\n\nexport const msalInstance = msalInit();\n\n","import { loginRequest, graphConfig } from \"../authConfig\";\nimport { msalInstance } from \"./MSALSetup\";\nimport {InteractionRequiredAuthError} from \"@azure/msal-browser\";\n\nexport const callMsGraphIter = async (url, opts) => {\n    let result = await callMsGraph(url, opts);\n    result = await result.json()\n    const values = result.value\n    while (result['@odata.nextLink']) {\n        result = await callMsGraph(result['@odata.nextLink']);\n        result = await result.json()\n        values.push(...result.value)\n    }\n    return values;\n}\n\nexport const callMsGraph = async (url, opts) => {\n    const account = msalInstance.getActiveAccount();\n    if (!account) {\n        throw Error(\"No active account! Verify a user has been signed in and setActiveAccount has been called.\");\n    }\n\n    const response = await msalInstance.acquireTokenSilent({\n        ...loginRequest,\n        account: account\n    });\n\n    const headers = new Headers(opts?.headers);\n    const bearer = `Bearer ${response.accessToken}`;\n    headers.append(\"Authorization\", bearer);\n\n    const options = {\n        method: \"GET\",\n        ...opts,\n        headers: headers,\n    };\n\n    const fetchUrl = url.startsWith(\"http\") ? url : `${graphConfig.apiBase}${url}`;\n\n    return fetch(fetchUrl, options)\n        .catch(MSALErrorHandler(msalInstance));\n}\n\nexport const MSALErrorHandler = instance => e => {\n    if (e instanceof InteractionRequiredAuthError) {\n        instance.acquireTokenRedirect({\n            ...loginRequest,\n            account: instance.getActiveAccount()\n        });\n    } else {\n        throw e;\n    }\n}\n\n","import dayjs from \"dayjs\";\nimport utc from \"dayjs/plugin/utc\";\nimport timezone from \"dayjs/plugin/timezone\";\n\nexport const timeFormat = \"YYYY-MM-DDTHH:mmZ\";\nexport const timeFormatNoTz = \"YYYY-MM-DDTHH:mm\";\n\nexport const calendarTimeZone = \"Europe/London\";\nexport const zoomBooths = [1, 2, 3, 4, 5, 6].map(n => `zoombooth${n}@socialfinance.org.uk`);\nexport const interval = 30*60; // in seconds\nexport const scheduleStart = 8, scheduleEnd = 19;\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\n/**\n * Takes a dayjs object and returns the same day if a working day, or the next working day if a weekend.\n *\n * <code>\n * getNextWorkingday(&lt;a Friday>) => &lt;a Friday>\n *\n * getNextWorkingday(&lt;a Saturday>) => &lt;a Monday>\n * </code>\n *\n * @param date\n * @returns date - the same dayjs passed in, or one representing the next working day.\n */\nexport const getNextWorkingday = date => {\n    const dayOfWeek = date.day();\n    if (dayOfWeek === 0) {\n        return date.add(1, \"day\")\n    } else if (dayOfWeek === 6) {\n        return date.add(2, \"day\")\n    }\n    return date;\n}\n\n/**\n * Takes a start date (defaults to today) and a number of days (defaults to 1) and calculates a complex object\n * to help paint the calendar and fetch availability data.\n *\n * The return object has the following structure:\n *\n * <pre>\n * {\n *    \"dates\": [\n *        {\n *            \"date\": \"2021-10-29\",\n *            \"noon\": 1635505200,\n *            \"startTime\": 1635490800,\n *            \"endTime\": 1635530400\n *        }\n *    ],\n *    \"startTime\": 1635490800,\n *    \"endTime\": 1635530400,\n *    \"interval\": 1800,\n *    \"intervalCount\": 22,\n *    intervals: [\n *      1635490800, 1635492600,\n *      ...\n *      1635526800, 1635528600\n *    ],\n *    datesIndexes: [\n *      [\n *         0,  1,  2,  3,  4,  5,  6,\n *         7,  8,  9, 10, 11, 12, 13,\n *        14, 15, 16, 17, 18, 19, 20,\n *        21\n *      ]\n *    ]\n * }\n * </pre>\n *\n * Interval length is measured in seconds. The intervals are the start times (unix epoch - seconds) of each interval.\n *\n * The date indexes refer to the indexes\n * @param date\n * @param days\n * @returns {{dates: *[], startTime, endTime, interval, intervalCount: number, intervals: number[], datesIndexes: *[]}}\n */\nexport const getDatePeriod = (date, days) => {\n    const dates = []\n    let nextDay = dayjs(date).hour(12).minute(0).second(0);\n    const numDays = days > 0 ? days : 1;\n    for (let i = 0; i < numDays; i++) {\n        nextDay = getNextWorkingday(nextDay);\n        dates.push({\n            date: nextDay.format(\"YYYY-MM-DD\"),\n            noon: nextDay.hour(12).unix(),\n            startTime: nextDay.hour(scheduleStart).unix(),\n            endTime: nextDay.hour(scheduleEnd).unix()\n        });\n        nextDay = nextDay.add(1, \"days\")\n    }\n    const data = {\n        dates,\n        startTime: dates[0].startTime,\n        endTime: dates[dates.length-1].endTime,\n        interval,\n    };\n    data.intervalCount = (data.endTime - data.startTime) / (interval);\n    data.intervals = Array(Math.ceil(data.intervalCount)).fill(0).map(\n        (el, ix) => data.startTime + ix * interval\n    );\n    // Constructs an array of arrays for each date containing the indexes of the scheduling hours\n    data.datesIndexes = dates.map(d =>\n        data.intervals.map((v, ix) =>\n            v >= d.startTime && v < d.endTime ? ix : -1).filter(v => v >= 0)\n    )\n    return data;\n}\n\n/**\n * Processes the data return from the MS Graph Booth Schedule call. The API result contains a list of\n * schedules for each requested resource:\n *\n * <pre>\n * {\n *     \"value\": [\n *         {\n *             \"scheduleId\": \"user@domain.com\",\n *             \"availabilityView\": \"000111001111...\"\n *         }\n *     ]\n * }\n * </pre>\n *\n * This function combines each individual availabilityView into a combined one for the whole query by adding\n * them together, and then then inverts this by taking the total number of schedules and removing the number of\n * occupied:\n *\n * <pre>\n * {\n *     \"value\": [\n *         ...\n *     ],\n *     \"occupied\": [0, 1, 2, 2, 3, 3, 1, 1],\n *     \"available\": [3, 2, 1, 1, 0, 0, 2 ,2]\n * }\n * </pre>\n *\n * @param boothData\n * @param dates\n * @returns {*}\n */\nexport const transformBoothData = (boothData) => {\n    const data = {\n        ...boothData,\n    };\n    const intervals = data.value[0].availabilityView.split(\"\");\n    data.occupied = intervals.map((e, ix) =>\n        zoomBooths.reduce((pv, cv, ci) =>\n            pv + parseInt(data.value[ci].availabilityView[ix]), 0))\n    data.available = intervals.map((e, ix) => data.value.length - data.occupied[ix])\n    return data;\n}\n\n/**\n * Processes the data return from the MS Graph Booth Schedule call. The API result contains a list of\n * events for the calendar:\n * <pre>\n * [\n *   {\n *     \"id\": \"...\",\n *     \"subject\": \"...\",\n *     \"start\": {\"dateTime\": \"2021-11-02T14:00\", \"timeZone\": \"UTC\"},\n *     \"end\": {\"dateTime\": \"2021-11-02T14:00\", \"timeZone\": \"UTC\"},\n *     \"attendees\": [\n *        {\n *           \"emailAddress\": {\"name\": \"...\", \"address\": \"...\"},\n *           \"status\": {\"response\": \"accepted\"},\n *           \"type\": \"required\"\n *        },\n *        ...\n *     ]\n *   },\n *   ...\n * ]\n * </pre>\n *\n * Filters the attendee data to add two properties, booths and acceptedBooths that holds the list for\n * \"booth attendees\" and \"booth attendees with accepted status\" only.\n *\n * @param calendarData\n * @returns *[]\n */\nexport const findBooths = calendarData => {\n    return calendarData\n        .map(e => {\n            e = {...e}\n            e.booths = e.attendees.filter(address =>\n                zoomBooths.indexOf(address.emailAddress.address.toLowerCase()) >= 0);\n            e.acceptedBooths = e.booths.filter(address =>\n                address.status.response.toLowerCase().indexOf(\"accepted\") >= 0);\n            return e;\n        })\n}\n\nexport const enrichCalendarData = (calendarData, dates) => {\n    const data = calendarData.map(e => {\n        e = {...e}\n        e.startTime = dayjs.tz(e.start.dateTime, e.start.timeZone).unix();\n        e.endTime = dayjs.tz(e.end.dateTime, e.end.timeZone).unix();\n        e.startIndex = Math.floor((e.startTime  - dates.startTime) / dates.interval);\n        e.endIndex = Math.ceil((e.endTime  - dates.startTime) / dates.interval) - 1;\n        return e;\n    });\n    data.intervals = data.reduce((arr, e) => {\n        for (let i=e.startIndex;i<=e.endIndex;i++) {\n            arr[i] = e.id;\n        }\n        return arr;\n    }, [])\n    return data;\n}\n\n","import {useCallback, useEffect, useMemo, useState} from \"react\";\nimport {callMsGraph, callMsGraphIter} from \"./MsGraphApiCall\";\nimport {\n    calendarTimeZone, enrichCalendarData, findBooths,\n    getDatePeriod,\n    interval,\n    timeFormat,\n    timeFormatNoTz, transformBoothData,\n    zoomBooths\n} from \"./CalendarDataUtil\";\nimport dayjs from \"dayjs\";\n\n\nexport const useCalendarService = ({startDate, days}) => {\n    const [dates, setDates] = useState({dates: []});\n    const [boothData, updateBoothData] =\n        useApiData(async () => dates.dates.length > 0 && loadBoothData(dates), [dates])\n    const [calendarData, updateCalendarData] =\n        useApiData(async () => dates.dates.length > 0  && loadCalendarData(dates), [dates])\n\n    useEffect(() => {\n        setDates(getDatePeriod(startDate, days));\n    }, [startDate, days])\n\n    useEffect(() => {\n        updateBoothData();\n    }, [updateBoothData])\n\n    useEffect(() => {\n        updateCalendarData();\n    }, [updateCalendarData])\n\n\n    const service = useMemo(() => {\n        return {\n            dates,\n            boothData,\n            calendarData,\n            refresh: () => {\n                updateBoothData();\n                updateCalendarData();\n            }\n        }\n    }, [dates, boothData, calendarData, updateBoothData, updateCalendarData])\n\n    return service;\n}\n\nconst useApiData = (callback, deps) => {\n    const [data, setData] = useState(null);\n    const loadData = useCallback(() => {\n        if (callback) {\n            callback().then(result => setData(result))\n        }\n    }, [...deps]); // eslint-disable-line react-hooks/exhaustive-deps\n    return [data, loadData]\n}\n\n\nconst loadBoothData = async (dates) => {\n    const url = \"/me/calendar/getSchedule\";\n    const headers = {\"Content-Type\": \"application/json\"};\n    const body = {\n        schedules: zoomBooths,\n        startTime: {\n            dateTime: dayjs.unix(dates.startTime).tz(calendarTimeZone).format(timeFormatNoTz),\n            timeZone: calendarTimeZone,\n        },\n        endTime: {\n            dateTime: dayjs.unix(dates.endTime).tz(calendarTimeZone).format(timeFormatNoTz),\n            timeZone: calendarTimeZone,\n        },\n        availabilityViewInterval: Math.round(interval / 60)\n    }\n    const boothData = await callMsGraph(url, {method: \"POST\", headers, body: JSON.stringify(body)});\n    return transformBoothData(await boothData.json(), dates);\n};\n\nconst loadCalendarData = async dates => {\n    const url = `/me/calendar/calendarView?`\n        + `startDateTime=${encodeURIComponent(dayjs.unix(dates.startTime).format(timeFormat))}&`\n        + `endDateTime=${encodeURIComponent(dayjs.unix(dates.endTime).format(timeFormat))}&`\n        + `$select=start,end,subject,attendees&`\n        + `$top=50`\n    const calendarData = findBooths(await callMsGraphIter(url))\n        .filter(e => e.acceptedBooths.length > 0);\n    return enrichCalendarData(calendarData, dates);\n};\n\nexport const bookBooth = async (start, duration) => {\n    const startTime =  dayjs.unix(start).tz(calendarTimeZone);\n    const endTime = startTime.add(duration, \"minutes\");\n    const headers = {\"Content-Type\": \"application/json\"};\n    const queryBody = {\n        schedules: zoomBooths,\n        startTime: {\n            dateTime: startTime.format(timeFormatNoTz),\n            timeZone: calendarTimeZone,\n        },\n        endTime: {\n            dateTime: endTime.format(timeFormatNoTz),\n            timeZone: calendarTimeZone,\n        },\n        availabilityViewInterval: duration\n    }\n\n    const boothResponse = await callMsGraph(\"/me/calendar/getSchedule\",\n        {method: \"POST\", headers, body: JSON.stringify(queryBody)});\n    const boothData = await boothResponse.json();\n    const availableBooths = boothData.value.filter(e => e.availabilityView === \"0\");\n\n    if (availableBooths.length === 0) {\n        return {error: \"nobooth\"};\n    }\n\n    const selectedBooth = availableBooths[Math.floor(Math.random() * availableBooths.length)];\n    const boothId = selectedBooth.scheduleId;\n    const boothName = boothId.split(\"@\")[0];\n    const boothNumber = boothName.replace(\"zoombooth\", '');\n\n    const body = {\n        subject: `Booth ${boothNumber}`,\n        start: {dateTime: startTime.format(timeFormat), timeZone: calendarTimeZone},\n        end: {dateTime: startTime.add(duration, \"minutes\").format(timeFormat), timeZone: calendarTimeZone},\n        attendees: [{emailAddress: {address: selectedBooth.scheduleId}}]\n    }\n    const bookingResult = await callMsGraph(\"/me/calendar/events\",\n        {method: \"POST\", headers, body: JSON.stringify(body)});\n    const bookingData = await bookingResult.json();\n    return {boothId, boothName, boothNumber, bookingData}\n}\n\nexport const cancelEvent = async eventId => {\n    const url = `/me/calendar/events/${eventId}`;\n    return await callMsGraph(url, {method: \"DELETE\"});\n}\n","import React, {useCallback, useEffect} from \"react\";\nimport { MsalAuthenticationTemplate } from \"@azure/msal-react\";\nimport { InteractionType } from \"@azure/msal-browser\";\nimport { loginRequest } from \"../authConfig\";\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Paper from \"@mui/material/Paper\";\nimport Button from \"@mui/material/Button\";\nimport {StringParam, useQueryParam} from \"use-query-params\";\nimport CalendarData from \"../ui-components/calendar/CalendarData\";\nimport { Loading } from \"../ui-components/Loading\";\nimport { ErrorComponent } from \"../ui-components/ErrorComponent\";\nimport {cancelEvent, bookBooth, useCalendarService} from \"../utils/CalendarService\";\n\nconst CalendarContent = () => {\n    const [date] = useQueryParam('date', StringParam);\n    const narrow = useMediaQuery('(max-width:750px)');\n    const calendarService = useCalendarService({startDate: date, days: narrow ? 1 : 5});\n\n    useEffect(() => {\n        const timeoutId = setTimeout(() => calendarService.refresh(), 15*1000);\n        return () => {\n            clearTimeout(timeoutId);\n        }\n    }, [calendarService])\n\n    const bookClick = useCallback(async (startTime, duration) => {\n        const bookingResult = await bookBooth(startTime, duration);\n        setTimeout(() => calendarService.refresh(), 3000);\n        setTimeout(() => calendarService.refresh(), 6000);\n        setTimeout(() => calendarService.refresh(), 9000);\n        return bookingResult;\n    }, [calendarService])\n\n    const deleteEventClick = useCallback(async eventId => {\n        await cancelEvent(eventId);\n        setTimeout(() => calendarService.refresh(), 2000);\n        setTimeout(() => calendarService.refresh(), 4000);\n        setTimeout(() => calendarService.refresh(), 6000);\n    }, [calendarService])\n\n    return (\n        <Paper>\n            { calendarService && <>\n                <CalendarData calendarService={calendarService} bookClick={bookClick}\n                              deleteEventClick={deleteEventClick} />\n                <Button onClick={calendarService.refresh}>Refresh</Button>\n            </>\n            }\n        </Paper>\n\n    );\n};\n\nexport function Calendar() {\n    const authRequest = {\n        ...loginRequest\n    };\n\n    return (\n        <MsalAuthenticationTemplate \n            interactionType={InteractionType.Redirect}\n            authenticationRequest={authRequest} \n            errorComponent={ErrorComponent} \n            loadingComponent={Loading}\n        >\n            <CalendarContent />\n        </MsalAuthenticationTemplate>\n      )\n};","import { Switch, Route, useHistory } from \"react-router-dom\";\n// Material-UI imports\nimport Grid from \"@mui/material/Grid\";\n\n// MSAL imports\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { CustomNavigationClient } from \"./utils/NavigationClient\";\n\nimport { PageLayout } from \"./ui-components/PageLayout\";\nimport { Logout } from \"./pages/Logout\";\nimport {Calendar} from \"./pages/Calendar\";\n\nfunction App({ pca }) {\n  // The next 3 lines are optional. This is how you configure MSAL to take advantage of the router's navigate functions when MSAL redirects between pages in your app\n  const history = useHistory();\n  const navigationClient = new CustomNavigationClient(history);\n  pca.setNavigationClient(navigationClient);\n\n  return (\n    <MsalProvider instance={pca}>\n      <PageLayout>\n        <Grid container justifyContent=\"center\">\n          <Pages />\n        </Grid>\n      </PageLayout>\n    </MsalProvider>\n  );\n}\n\nfunction Pages() {\n  return (\n    <Switch>\n      <Route path=\"/logout\">\n          <Logout />\n      </Route>\n      <Route path=\"/\">\n          <Calendar />\n      </Route>\n    </Switch>\n  )\n}\n\nexport default App;\n","// If you need to support IE11 uncomment the imports below\n//import \"react-app-polyfill/ie11\";\n//import \"core-js/stable\"; \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport {CssBaseline, ThemeProvider} from '@mui/material';\nimport { QueryParamProvider } from 'use-query-params';\nimport { theme } from \"./styles/theme\";\nimport App from './App';\nimport {msalInstance} from \"./utils/MSALSetup\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <CssBaseline/>\n        <Router>\n            <ThemeProvider theme={theme}>\n                <QueryParamProvider ReactRouterRoute={Route}>\n                    <App pca={msalInstance} />\n                </QueryParamProvider>\n            </ThemeProvider>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}