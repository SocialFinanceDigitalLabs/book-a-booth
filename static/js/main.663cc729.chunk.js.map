{"version":3,"sources":["styles/theme.js","utils/NavigationClient.js","ui-components/WelcomeName.jsx","authConfig.js","ui-components/SignInButton.jsx","ui-components/AccountPicker.jsx","ui-components/SignOutButton.jsx","ui-components/SignInSignOutButton.jsx","styles/useStyles.js","ui-components/NavBar.jsx","ui-components/PageLayout.jsx","pages/Logout.jsx","utils/MSALSetup.js","utils/MsGraphApiCall.js","utils/CalendarDataUtil.js","utils/CalendarService.js","ui-components/calendar/CalendarData.jsx","ui-components/Loading.jsx","ui-components/ErrorComponent.jsx","pages/Calendar.jsx","App.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","CustomNavigationClient","history","url","options","a","relativePath","replace","window","location","origin","noHistory","this","push","NavigationClient","WelcomeName","instance","useMsal","useState","name","setName","activeAccount","getActiveAccount","useEffect","split","Typography","variant","ua","navigator","userAgent","msie","indexOf","msie11","msedge","firefox","msalConfig","auth","clientId","authority","redirectUri","postLogoutRedirectUri","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","message","containsPii","LogLevel","Error","console","Info","info","Verbose","debug","Warning","warn","loginRequest","scopes","graphConfig","SignInButton","anchorEl","setAnchorEl","open","Boolean","handleLogin","loginType","loginPopup","loginRedirect","Button","onClick","event","currentTarget","color","Menu","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","AccountPicker","props","accounts","handleListItemClick","account","setActiveAccount","reload","prompt","Dialog","aria-labelledby","DialogTitle","List","map","ListItem","button","ListItemAvatar","Avatar","ListItemText","username","homeAccountId","autoFocus","SignOutButton","accountSelectorOpen","setOpen","IconButton","logoutType","logoutPopup","logoutRedirect","SignInSignOutButton","inProgress","useIsAuthenticated","InteractionStatus","Startup","HandleRedirect","useStyles","makeStyles","root","flexGrow","menuButton","marginRight","spacing","title","textDecoration","NavBar","classes","className","AppBar","position","Toolbar","Link","component","RouterLink","to","PageLayout","children","Logout","onRedirectNavigate","BrowserUtils","isInIframe","msalInstance","PublicClientApplication","getAllAccounts","length","enableAccountStorageEvents","addEventCallback","eventType","EventType","LOGIN_SUCCESS","payload","msalInit","callMsGraphIter","opts","callMsGraph","result","json","values","value","acquireTokenSilent","response","headers","Headers","bearer","accessToken","append","method","fetchUrl","startsWith","fetch","catch","MSALErrorHandler","e","InteractionRequiredAuthError","acquireTokenRedirect","timeFormat","timeFormatNoTz","calendarTimeZone","zoomBooths","n","interval","dayjs","extend","utc","timezone","getNextWorkingday","date","dayOfWeek","day","add","transformBoothData","boothData","data","intervals","availabilityView","occupied","ix","reduce","pv","cv","ci","parseInt","available","findBooths","calendarData","booths","attendees","filter","address","emailAddress","toLowerCase","acceptedBooths","status","enrichCalendarData","dates","startTime","tz","start","dateTime","timeZone","unix","endTime","end","startIndex","Math","floor","endIndex","ceil","arr","i","useCalendarService","startDate","days","setDates","useApiData","loadBoothData","updateBoothData","loadCalendarData","updateCalendarData","nextDay","hour","minute","second","numDays","format","noon","intervalCount","Array","fill","el","datesIndexes","d","v","getDatePeriod","useMemo","refresh","callback","deps","setData","useCallback","then","body","schedules","availabilityViewInterval","round","JSON","stringify","encodeURIComponent","bookBooth","booth","subject","cancelEvent","eventId","availableColors","CalendarData","calendarService","selected","setSelected","groups","setGroups","selectCell","cellIndex","arrayIndex","newArray","sort","b","splice","prevValue","cells","bookBoothClick","g","x","includes","calendarView","timeslotIndex","time","dateIndex","timeslot","events","log","TableContainer","Paper","Table","sx","minWidth","size","TableHead","TableRow","TableCell","align","TableBody","row","rowIndex","borderBottom","borderRight","scope","ScheduleSendIcon","undefined","EventAvailableIcon","SentimentVeryDissatisfiedIcon","SentimentNeutralIcon","SentimentVerySatisfiedIcon","getAvailableIcon","backgroundColor","Icon","Loading","ErrorComponent","errorCode","CalendarContent","useQueryParam","StringParam","wide","useMediaQuery","timeoutId","setTimeout","clearTimeout","cancelEventClick","Calendar","authRequest","interactionType","InteractionType","Redirect","authenticationRequest","errorComponent","loadingComponent","Pages","path","App","pca","useHistory","navigationClient","setNavigationClient","Grid","container","justifyContent","ReactDOM","render","StrictMode","ThemeProvider","ReactRouterRoute","Route","document","getElementById"],"mappings":"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","file":"static/js/main.663cc729.chunk.js","sourcesContent":["import { unstable_createMuiStrictModeTheme as createMuiTheme } from '@mui/material/styles';\nimport red from '@mui/material/colors/red';\n\n// Create a theme instance.\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n","import { NavigationClient } from \"@azure/msal-browser\";\n\n/**\n * This is an example for overriding the default function MSAL uses to navigate to other urls in your webpage\n */\nexport class CustomNavigationClient extends NavigationClient{\n    constructor(history) {\n        super();\n        this.history = history;\n    }\n\n    /**\n     * Navigates to other pages within the same web application\n     * You can use the useHistory hook provided by react-router-dom to take advantage of client-side routing\n     * @param url \n     * @param options \n     */\n    async navigateInternal(url, options) {\n        const relativePath = url.replace(window.location.origin, '');\n        if (options.noHistory) {\n            this.history.replace(relativePath);\n        } else {\n            this.history.push(relativePath);\n        }\n\n        return false;\n    }\n}\n","import { useEffect, useState } from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport Typography from \"@mui/material/Typography\";\n\nconst WelcomeName = () => {\n    const { instance } = useMsal();\n    const [name, setName] = useState(null);\n\n    const activeAccount = instance.getActiveAccount();\n    useEffect(() => {\n        if (activeAccount) {\n            setName(activeAccount.name.split(' ')[0]);\n        } else {\n            setName(null);\n        }\n    }, [activeAccount]);\n\n    if (name) {\n        return <Typography variant=\"h6\">Welcome, {name}</Typography>;\n    } else {\n        return null;\n    }\n};\n\nexport default WelcomeName;","import { LogLevel } from \"@azure/msal-browser\";\n// Browser check variables\n// If you support IE, our recommendation is that you sign-in using Redirect APIs\n// If you as a developer are testing using Edge InPrivate mode, please add \"isEdge\" to the if check\nconst ua = window.navigator.userAgent;\nconst msie = ua.indexOf(\"MSIE \");\nconst msie11 = ua.indexOf(\"Trident/\");\nconst msedge = ua.indexOf(\"Edge/\");\nconst firefox = ua.indexOf(\"Firefox\");\nconst isIE = msie > 0 || msie11 > 0;\nconst isEdge = msedge > 0;\nconst isFirefox = firefox > 0; // Only needed if you need to support the redirect flow in Firefox incognito\n\n// Config object to be passed to Msal on creation\nexport const msalConfig = {\n    auth: {\n        clientId: \"36bc0775-9527-484c-9c48-2e846090732b\",\n        authority: \"https://login.microsoftonline.com/9c85420c-07ed-40e7-9c4c-4207556dc906\",\n        redirectUri: \"/\",\n        postLogoutRedirectUri: \"/\"\n    },\n    cache: {\n        cacheLocation: \"localStorage\",\n        storeAuthStateInCookie: isIE || isEdge || isFirefox\n    },\n    system: {\n        loggerOptions: {\n            loggerCallback: (level, message, containsPii) => {\n                if (containsPii) {\t\n                    return;\t\n                }\n                switch (level) {\t\n                    case LogLevel.Error:\t\n                        console.error(message);\t\n                        return;\t\n                    case LogLevel.Info:\t\n                        console.info(message);\t\n                        return;\t\n                    case LogLevel.Verbose:\t\n                        console.debug(message);\t\n                        return;\t\n                    case LogLevel.Warning:\t\n                        console.warn(message);\t\n                        return;\t\n                    default:\n                        return;\n                }\n            }\n        }\n    }\n};\n\n// Add here scopes for id token to be used at MS Identity Platform endpoints.\nexport const loginRequest = {\n    scopes: [\"User.Read\", \"Calendars.ReadWrite\"]\n};\n\n// Add here the endpoints for MS Graph API services you would like to use.\nexport const graphConfig = {\n    apiBase: \"https://graph.microsoft.com/v1.0\",\n    graphMeEndpoint: \"https://graph.microsoft.com/v1.0/me\"\n};\n","import { useState } from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport Button from \"@mui/material/Button\";\nimport MenuItem from '@mui/material/MenuItem';\nimport Menu from '@mui/material/Menu';\nimport { loginRequest } from \"../authConfig\";\n\nexport const SignInButton = () => {\n    const { instance } = useMsal();\n\n    const [anchorEl, setAnchorEl] = useState(null);\n    const open = Boolean(anchorEl);\n\n    const handleLogin = (loginType) => {\n        setAnchorEl(null);\n\n        if (loginType === \"popup\") {\n            instance.loginPopup(loginRequest);\n        } else if (loginType === \"redirect\") {\n            instance.loginRedirect(loginRequest);\n        }\n    }\n\n    return (\n        <div>\n            <Button\n                onClick={(event) => setAnchorEl(event.currentTarget)}\n                color=\"inherit\"\n            >\n                Login\n            </Button>\n            <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n                }}\n                keepMounted\n                transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n                }}\n                open={open}\n                onClose={() => setAnchorEl(null)}\n            >\n                <MenuItem onClick={() => handleLogin(\"popup\")} key=\"loginPopup\">Sign in using Popup</MenuItem>\n                <MenuItem onClick={() => handleLogin(\"redirect\")} key=\"loginRedirect\">Sign in using Redirect</MenuItem>\n            </Menu>\n        </div>\n    )\n};","import React from 'react';\nimport { useMsal } from \"@azure/msal-react\";\nimport Avatar from '@mui/material/Avatar';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemText from '@mui/material/ListItemText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Dialog from '@mui/material/Dialog';\nimport PersonIcon from '@mui/icons-material/Person';\nimport AddIcon from '@mui/icons-material/Add';\nimport { loginRequest } from \"../authConfig\";\n\nexport const AccountPicker = (props) => {\n    const { instance, accounts } = useMsal();\n    const { onClose, open } = props;\n\n    const handleListItemClick = (account) => {\n        instance.setActiveAccount(account);\n        if (!account) {\n            instance.loginRedirect({\n                ...loginRequest,\n                prompt: \"login\"\n            })\n        } else {\n            // To ensure account related page attributes update after the account is changed\n            window.location.reload();\n        }\n\n        onClose(account);\n    };\n\n    return (\n        <Dialog onClose={onClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n          <DialogTitle id=\"simple-dialog-title\">Set active account</DialogTitle>\n          <List>\n            {accounts.map((account) => (\n              <ListItem button onClick={() => handleListItemClick(account)} key={account.homeAccountId}>\n                <ListItemAvatar>\n                  <Avatar>\n                    <PersonIcon />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText primary={account.name} secondary={account.username} />\n              </ListItem>\n            ))}\n    \n            <ListItem autoFocus button onClick={() => handleListItemClick(null)}>\n              <ListItemAvatar>\n                <Avatar>\n                  <AddIcon />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary=\"Add account\" />\n            </ListItem>\n          </List>\n        </Dialog>\n      );\n};","import { useState } from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport IconButton from '@mui/material/IconButton';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport MenuItem from '@mui/material/MenuItem';\nimport Menu from '@mui/material/Menu';\nimport { AccountPicker } from \"./AccountPicker\";\n\nexport const SignOutButton = () => {\n    const { instance } = useMsal();\n    const [accountSelectorOpen, setOpen] = useState(false);\n\n    const [anchorEl, setAnchorEl] = useState(null);\n    const open = Boolean(anchorEl);\n\n    const handleLogout = (logoutType) => {\n        setAnchorEl(null);\n\n        if (logoutType === \"popup\") {\n            instance.logoutPopup();\n        } else if (logoutType === \"redirect\") {\n            instance.logoutRedirect();\n        }\n    }\n\n    const handleAccountSelection = () => {\n        setAnchorEl(null);\n        setOpen(true);\n    }\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div>\n            <IconButton\n                onClick={(event) => setAnchorEl(event.currentTarget)}\n                color=\"inherit\"\n            >\n                <AccountCircle />\n            </IconButton>\n            <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n                }}\n                keepMounted\n                transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n                }}\n                open={open}\n                onClose={() => setAnchorEl(null)}\n            >\n                <MenuItem onClick={() => handleAccountSelection()} key=\"switchAccount\">Switch Account</MenuItem>\n                <MenuItem onClick={() => handleLogout(\"redirect\")} key=\"logoutRedirect\">Logout using Redirect</MenuItem>\n            </Menu>\n            <AccountPicker open={accountSelectorOpen} onClose={handleClose} />\n        </div>\n    )\n};","import { useIsAuthenticated, useMsal } from \"@azure/msal-react\";\nimport { SignInButton } from \"./SignInButton\";\nimport { SignOutButton } from \"./SignOutButton\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n\nconst SignInSignOutButton = () => {\n    const { inProgress } = useMsal();\n    const isAuthenticated = useIsAuthenticated();\n\n    if (isAuthenticated) {\n        return <SignOutButton />;\n    } else if (inProgress !== InteractionStatus.Startup && inProgress !== InteractionStatus.HandleRedirect) {\n        // inProgress check prevents sign-in button from being displayed briefly after returning from a redirect sign-in. Processing the server response takes a render cycle or two\n        return <SignInButton />;\n    } else {\n        return null;\n    }\n}\n\nexport default SignInSignOutButton;","import { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n      '& a': {\n          textDecoration: 'none',\n      },\n    },\n}));\n\nexport default useStyles;","import {AppBar, Toolbar, Link, Typography} from \"@mui/material\";\nimport WelcomeName from \"./WelcomeName\";\nimport SignInSignOutButton from \"./SignInSignOutButton\";\nimport useStyles from \"../styles/useStyles\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nconst NavBar = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n            <Toolbar>\n                <Typography className={classes.title}>\n                    <Link component={RouterLink} to=\"/\" color=\"inherit\" variant=\"h6\">SF Booth Booking</Link>\n                </Typography>\n                <WelcomeName />\n                <SignInSignOutButton />\n            </Toolbar>\n            </AppBar>\n        </div>\n    );\n};\n\nexport default NavBar;","import NavBar from \"./NavBar\";\n\nexport const PageLayout = (props) => {\n    return (\n        <>\n            <NavBar />\n            <br/>\n            <br/>\n            {props.children}\n        </>\n    );\n};","import React, { useEffect } from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { BrowserUtils } from \"@azure/msal-browser\";\n\nexport function Logout() {\n    const { instance } = useMsal();\n\n    useEffect(() => {\n        instance.logoutRedirect({\n            account: instance.getActiveAccount(),\n            onRedirectNavigate: () => !BrowserUtils.isInIframe()\n        })\n    }, [ instance ]);\n\n    return (\n        <div>Logout</div>\n    )\n}\n","// MSAL imports\nimport { PublicClientApplication, EventType } from \"@azure/msal-browser\";\nimport { msalConfig } from \"../authConfig\";\n\nconst msalInit = () => {\n    const msalInstance = new PublicClientApplication(msalConfig);\n\n    // Default to using the first account if no account is active on page load\n    if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\n        // Account selection logic is app dependent. Adjust as needed for different use cases.\n        msalInstance.setActiveAccount(msalInstance.getAllAccounts()[0]);\n    }\n\n    // Optional - This will update account state if a user signs in from another tab or window\n    msalInstance.enableAccountStorageEvents();\n\n    msalInstance.addEventCallback((event) => {\n        if (event.eventType === EventType.LOGIN_SUCCESS && event.payload.account) {\n            const account = event.payload.account;\n            msalInstance.setActiveAccount(account);\n        }\n    });\n    return msalInstance;\n}\n\nexport const msalInstance = msalInit();\n\n","import { loginRequest, graphConfig } from \"../authConfig\";\nimport { msalInstance } from \"./MSALSetup\";\nimport {InteractionRequiredAuthError} from \"@azure/msal-browser\";\n\nexport const callMsGraphIter = async (url, opts) => {\n    let result = await callMsGraph(url, opts);\n    result = await result.json()\n    const values = result.value\n    while (result['@odata.nextLink']) {\n        result = await callMsGraph(result['@odata.nextLink']);\n        result = await result.json()\n        values.push(...result.value)\n    }\n    return values;\n}\n\nexport const callMsGraph = async (url, opts) => {\n    const account = msalInstance.getActiveAccount();\n    if (!account) {\n        throw Error(\"No active account! Verify a user has been signed in and setActiveAccount has been called.\");\n    }\n\n    const response = await msalInstance.acquireTokenSilent({\n        ...loginRequest,\n        account: account\n    });\n\n    const headers = new Headers(opts?.headers);\n    const bearer = `Bearer ${response.accessToken}`;\n    headers.append(\"Authorization\", bearer);\n\n    const options = {\n        method: \"GET\",\n        ...opts,\n        headers: headers,\n    };\n\n    const fetchUrl = url.startsWith(\"http\") ? url : `${graphConfig.apiBase}${url}`;\n\n    return fetch(fetchUrl, options)\n        .catch(MSALErrorHandler(msalInstance));\n}\n\nexport const MSALErrorHandler = instance => e => {\n    if (e instanceof InteractionRequiredAuthError) {\n        instance.acquireTokenRedirect({\n            ...loginRequest,\n            account: instance.getActiveAccount()\n        });\n    } else {\n        throw e;\n    }\n}\n\n","import dayjs from \"dayjs\";\nimport utc from \"dayjs/plugin/utc\";\nimport timezone from \"dayjs/plugin/timezone\";\n\nexport const timeFormat = \"YYYY-MM-DDTHH:mmZ\";\nexport const timeFormatNoTz = \"YYYY-MM-DDTHH:mm\";\n\nexport const calendarTimeZone = \"Europe/London\";\nexport const zoomBooths = [1, 2, 3].map(n => `zoombooth${n}@socialfinance.org.uk`);\nexport const interval = 30*60; // in seconds\nexport const scheduleStart = 8, scheduleEnd = 19;\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\n/**\n * Takes a dayjs object and returns the same day if a working day, or the next working day if a weekend.\n *\n * <code>\n * getNextWorkingday(&lt;a Friday>) => &lt;a Friday>\n *\n * getNextWorkingday(&lt;a Saturday>) => &lt;a Monday>\n * </code>\n *\n * @param date\n * @returns date - the same dayjs passed in, or one representing the next working day.\n */\nexport const getNextWorkingday = date => {\n    const dayOfWeek = date.day();\n    if (dayOfWeek === 0) {\n        return date.add(1, \"day\")\n    } else if (dayOfWeek === 6) {\n        return date.add(2, \"day\")\n    }\n    return date;\n}\n\n/**\n * Takes a start date (defaults to today) and a number of days (defaults to 1) and calculates a complex object\n * to help paint the calendar and fetch availability data.\n *\n * The return object has the following structure:\n *\n * <pre>\n * {\n *    \"dates\": [\n *        {\n *            \"date\": \"2021-10-29\",\n *            \"noon\": 1635505200,\n *            \"startTime\": 1635490800,\n *            \"endTime\": 1635530400\n *        }\n *    ],\n *    \"startTime\": 1635490800,\n *    \"endTime\": 1635530400,\n *    \"interval\": 1800,\n *    \"intervalCount\": 22,\n *    intervals: [\n *      1635490800, 1635492600,\n *      ...\n *      1635526800, 1635528600\n *    ],\n *    datesIndexes: [\n *      [\n *         0,  1,  2,  3,  4,  5,  6,\n *         7,  8,  9, 10, 11, 12, 13,\n *        14, 15, 16, 17, 18, 19, 20,\n *        21\n *      ]\n *    ]\n * }\n * </pre>\n *\n * Interval length is measured in seconds. The intervals are the start times (unix epoch - seconds) of each interval.\n *\n * The date indexes refer to the indexes\n * @param date\n * @param days\n * @returns {{dates: *[], startTime, endTime, interval, intervalCount: number, intervals: number[], datesIndexes: *[]}}\n */\nexport const getDatePeriod = (date, days) => {\n    const dates = []\n    let nextDay = dayjs(date).hour(12).minute(0).second(0);\n    const numDays = days > 0 ? days : 1;\n    for (let i = 0; i < numDays; i++) {\n        nextDay = getNextWorkingday(nextDay);\n        dates.push({\n            date: nextDay.format(\"YYYY-MM-DD\"),\n            noon: nextDay.hour(12).unix(),\n            startTime: nextDay.hour(scheduleStart).unix(),\n            endTime: nextDay.hour(scheduleEnd).unix()\n        });\n        nextDay = nextDay.add(1, \"days\")\n    }\n    const data = {\n        dates,\n        startTime: dates[0].startTime,\n        endTime: dates[dates.length-1].endTime,\n        interval,\n    };\n    data.intervalCount = (data.endTime - data.startTime) / (interval);\n    data.intervals = Array(Math.ceil(data.intervalCount)).fill(0).map(\n        (el, ix) => data.startTime + ix * interval\n    );\n    // Constructs an array of arrays for each date containing the indexes of the scheduling hours\n    data.datesIndexes = dates.map(d =>\n        data.intervals.map((v, ix) =>\n            v >= d.startTime && v < d.endTime ? ix : -1).filter(v => v >= 0)\n    )\n    return data;\n}\n\n/**\n * Processes the data return from the MS Graph Booth Schedule call. The API result contains a list of\n * schedules for each requested resource:\n *\n * <pre>\n * {\n *     \"value\": [\n *         {\n *             \"scheduleId\": \"user@domain.com\",\n *             \"availabilityView\": \"000111001111...\"\n *         }\n *     ]\n * }\n * </pre>\n *\n * This function combines each individual availabilityView into a combined one for the whole query by adding\n * them together, and then then inverts this by taking the total number of schedules and removing the number of\n * occupied:\n *\n * <pre>\n * {\n *     \"value\": [\n *         ...\n *     ],\n *     \"occupied\": [0, 1, 2, 2, 3, 3, 1, 1],\n *     \"available\": [3, 2, 1, 1, 0, 0, 2 ,2]\n * }\n * </pre>\n *\n * @param boothData\n * @param dates\n * @returns {*}\n */\nexport const transformBoothData = (boothData) => {\n    const data = {\n        ...boothData,\n    };\n    const intervals = data.value[0].availabilityView.split(\"\");\n    data.occupied = intervals.map((e, ix) =>\n        zoomBooths.reduce((pv, cv, ci) =>\n            pv + parseInt(data.value[ci].availabilityView[ix]), 0))\n    data.available = intervals.map((e, ix) => data.value.length - data.occupied[ix])\n    return data;\n}\n\n/**\n * Processes the data return from the MS Graph Booth Schedule call. The API result contains a list of\n * events for the calendar:\n * <pre>\n * [\n *   {\n *     \"id\": \"...\",\n *     \"subject\": \"...\",\n *     \"start\": {\"dateTime\": \"2021-11-02T14:00\", \"timeZone\": \"UTC\"},\n *     \"end\": {\"dateTime\": \"2021-11-02T14:00\", \"timeZone\": \"UTC\"},\n *     \"attendees\": [\n *        {\n *           \"emailAddress\": {\"name\": \"...\", \"address\": \"...\"},\n *           \"status\": {\"response\": \"accepted\"},\n *           \"type\": \"required\"\n *        },\n *        ...\n *     ]\n *   },\n *   ...\n * ]\n * </pre>\n *\n * Filters the attendee data to add two properties, booths and acceptedBooths that holds the list for\n * \"booth attendees\" and \"booth attendees with accepted status\" only.\n *\n * @param calendarData\n * @returns *[]\n */\nexport const findBooths = calendarData => {\n    return calendarData\n        .map(e => {\n            e = {...e}\n            e.booths = e.attendees.filter(address =>\n                zoomBooths.indexOf(address.emailAddress.address.toLowerCase()) >= 0);\n            e.acceptedBooths = e.booths.filter(address =>\n                address.status.response.toLowerCase().indexOf(\"accepted\") >= 0);\n            return e;\n        })\n}\n\nexport const enrichCalendarData = (calendarData, dates) => {\n    const data = calendarData.map(e => {\n        e = {...e}\n        e.startTime = dayjs.tz(e.start.dateTime, e.start.timeZone).unix();\n        e.endTime = dayjs.tz(e.end.dateTime, e.end.timeZone).unix();\n        e.startIndex = Math.floor((e.startTime  - dates.startTime) / dates.interval);\n        e.endIndex = Math.ceil((e.endTime  - dates.startTime) / dates.interval) - 1;\n        return e;\n    });\n    data.intervals = data.reduce((arr, e) => {\n        for (let i=e.startIndex;i<=e.endIndex;i++) {\n            arr[i] = e.id;\n        }\n        return arr;\n    }, [])\n    return data;\n}\n\n","import {useCallback, useEffect, useMemo, useState} from \"react\";\nimport {callMsGraph, callMsGraphIter} from \"./MsGraphApiCall\";\nimport {\n    calendarTimeZone, enrichCalendarData, findBooths,\n    getDatePeriod,\n    interval,\n    timeFormat,\n    timeFormatNoTz, transformBoothData,\n    zoomBooths\n} from \"./CalendarDataUtil\";\nimport dayjs from \"dayjs\";\n\n\nexport const useCalendarService = ({startDate, days}) => {\n    const [dates, setDates] = useState({dates: []});\n    const [boothData, updateBoothData] =\n        useApiData(async () => dates.dates.length > 0 && loadBoothData(dates), [dates])\n    const [calendarData, updateCalendarData] =\n        useApiData(async () => dates.dates.length > 0  && loadCalendarData(dates), [dates])\n\n    useEffect(() => {\n        setDates(getDatePeriod(startDate, days));\n    }, [startDate, days])\n\n    useEffect(() => {\n        updateBoothData();\n    }, [updateBoothData])\n\n    useEffect(() => {\n        updateCalendarData();\n    }, [updateCalendarData])\n\n\n    const service = useMemo(() => {\n        return {\n            dates,\n            boothData,\n            calendarData,\n            refresh: () => {\n                updateBoothData();\n                updateCalendarData();\n            }\n        }\n    }, [dates, boothData, calendarData, updateBoothData, updateCalendarData])\n\n    return service;\n}\n\nconst useApiData = (callback, deps) => {\n    const [data, setData] = useState(null);\n    const loadData = useCallback(() => {\n        if (callback) {\n            callback().then(result => setData(result))\n        }\n    }, [...deps]); // eslint-disable-line react-hooks/exhaustive-deps\n    return [data, loadData]\n}\n\n\nconst loadBoothData = async (dates) => {\n    const url = \"/me/calendar/getSchedule\";\n    const headers = {\"Content-Type\": \"application/json\"};\n    const body = {\n        schedules: zoomBooths,\n        startTime: {\n            dateTime: dayjs.unix(dates.startTime).tz(calendarTimeZone).format(timeFormatNoTz),\n            timeZone: calendarTimeZone,\n        },\n        endTime: {\n            dateTime: dayjs.unix(dates.endTime).tz(calendarTimeZone).format(timeFormatNoTz),\n            timeZone: calendarTimeZone,\n        },\n        availabilityViewInterval: Math.round(interval / 60)\n    }\n    const boothData = await callMsGraph(url, {method: \"POST\", headers, body: JSON.stringify(body)});\n    return transformBoothData(await boothData.json(), dates);\n};\n\nconst loadCalendarData = async dates => {\n    const url = `/me/calendar/calendarView?`\n        + `startDateTime=${encodeURIComponent(dayjs.unix(dates.startTime).format(timeFormat))}&`\n        + `endDateTime=${encodeURIComponent(dayjs.unix(dates.endTime).format(timeFormat))}&`\n        + `$select=start,end,subject,attendees&`\n        + `$top=50`\n    const calendarData = findBooths(await callMsGraphIter(url))\n        .filter(e => e.acceptedBooths.length > 0);\n    return enrichCalendarData(calendarData, dates);\n};\n\nexport const bookBooth = async (booth, startTime, endTime) => {\n    const url = \"/me/calendar/events\";\n    const headers = {\"Content-Type\": \"application/json\"};\n    const body = {\n        subject: \"Booth Booking\",\n        start: {dateTime: dayjs.unix(startTime).tz(calendarTimeZone).format(timeFormat), timeZone: calendarTimeZone},\n        end: {dateTime: dayjs.unix(endTime).tz(calendarTimeZone).add(interval, \"seconds\").format(timeFormat),\n            timeZone: calendarTimeZone},\n        attendees: [{emailAddress: {address: booth}}]\n    }\n    return await callMsGraph(url, {method: \"POST\", headers, body: JSON.stringify(body)});\n}\n\nexport const cancelEvent = async eventId => {\n    const url = `/me/calendar/events/${eventId}`;\n    return await callMsGraph(url, {method: \"DELETE\"});\n}\n","import React, {useCallback, useMemo, useState} from \"react\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport Table from \"@mui/material/Table\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableCell from \"@mui/material/TableCell\";\nimport Paper from \"@mui/material/Paper\";\nimport SentimentVeryDissatisfiedIcon from '@mui/icons-material/SentimentVeryDissatisfied';\nimport SentimentNeutralIcon from '@mui/icons-material/SentimentNeutral';\nimport SentimentVerySatisfiedIcon from '@mui/icons-material/SentimentVerySatisfied';\nimport EventAvailableIcon from '@mui/icons-material/EventAvailable';\nimport ScheduleSendIcon from '@mui/icons-material/ScheduleSend';\nimport Button from \"@mui/material/Button\";\nimport {bookBooth} from \"../../utils/CalendarService\";\nimport {zoomBooths} from \"../../utils/CalendarDataUtil\";\nimport dayjs from \"dayjs\";\n\nconst availableColors = [\n    \"#EF9A9A\",\n    \"#FFCC80\",\n    \"#FFF59D\",\n]\n\nconst getAvailableIcon = day => {\n    if (day.selected) {\n        return ['#CCC', ScheduleSendIcon];\n    }\n    if (day.events !== undefined && day.events !== -1) {\n        return ['#00F', EventAvailableIcon];\n    }\n    const color = day.available >= availableColors.length ? \"#A5D6A7\" : availableColors[day.available];\n    if (day.available === 0) {\n        return [color, SentimentVeryDissatisfiedIcon];\n    } else if (day.available <= 2) {\n        return [color, SentimentNeutralIcon];\n    } else {\n        return [color, SentimentVerySatisfiedIcon];\n    }\n}\n\n\n\nconst CalendarData = ({calendarService}) => {\n    const [selected, setSelected] = useState([]);\n    const [groups, setGroups] = useState([])\n    const {dates, boothData, calendarData, refresh} = calendarService;\n\n    const selectCell = useCallback(cellIndex => {\n        const arrayIndex = selected.indexOf(cellIndex);\n        const newArray = [...selected]\n\n        if (arrayIndex < 0) {\n            newArray.push(cellIndex);\n            newArray.sort((a, b) => a - b);\n        } else {\n            newArray.splice(arrayIndex, 1);\n        }\n\n        const groups = Array(newArray.length).fill(-1).map((v, ix) => {\n            const prevValue = newArray[ix] - 1;\n            return newArray.indexOf(prevValue);\n        }).reduce((pv, cv, ci, arr) => {\n            if (cv < 0) {\n                pv.push([newArray[ci]])\n            } else {\n                pv[pv.length-1].push(newArray[ci])\n            }\n            return pv;\n        }, []).map((arr, ix) => {\n            return {\n                start: dates.intervals[arr[0]],\n                end: dates.intervals[arr[arr.length-1]],\n                cells: arr,\n            }\n        });\n\n        setSelected(newArray);\n        setGroups(groups);\n    }, [selected, dates]);\n\n\n    const bookBoothClick = useCallback(g => {\n        bookBooth(zoomBooths[0], g.start, g.end).then((result) => {\n            refresh();\n            setSelected(selected.filter(x => !g.cells.includes(x)));\n        })\n    }, [refresh, selected]);\n\n    const calendarView = useMemo(() => {\n        if (dates && dates.datesIndexes) {\n            return dates.datesIndexes[0].map(timeslotIndex => {\n                return {\n                    time: dates.intervals[timeslotIndex],\n                    days: dates.datesIndexes.map(dateIndex => {\n                        const timeslot = dateIndex[timeslotIndex];\n                        return {\n                            timeslot,\n                            available: boothData ? boothData.available[timeslot] : -1,\n                            events: calendarData ? calendarData.intervals[timeslot] : -1,\n                            selected: selected.indexOf(timeslot) >=0,\n                        }\n                    })\n                };\n            })\n        } else {\n            return [];\n        }\n    }, [dates, boothData, calendarData, selected])\n\n    console.log(\"calendarView\", calendarView);\n\n    return (\n        <>\n        <TableContainer component={Paper}>\n            <Table sx={{ minWidth: 250 }} size=\"small\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Time</TableCell>\n                        {dates.dates.map(d =>\n                            <TableCell key={d.noon} align=\"center\">\n                                {dayjs.unix(d.noon).format(\"ddd, D MMM\")}\n                            </TableCell>\n                        )}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {calendarView.map((row, rowIndex) => {\n                        const borderBottom = rowIndex % 2 === 0 ? 0 : '1px solid #eee';\n                        return (\n                            <TableRow\n                                key={row.time}\n                                sx={{\n                                    'td,th': { borderBottom, borderRight: '1px solid #eee' },\n                                    '&:last-child td, &:last-child th': { borderBottom: 0 }\n                                }}\n                                >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    { dayjs.unix(row.time).format(\"HH:mm\") }\n                                </TableCell>\n                                { row.days.map(day => {\n                                    const [backgroundColor, Icon] = getAvailableIcon(day);\n                                    return (\n                                        <TableCell key={day.timeslot} sx={{backgroundColor}}\n                                                   onClick={() => selectCell(day.timeslot)}\n                                                   align=\"center\">\n                                            <Icon />\n                                        </TableCell>\n                                    )\n                                })}\n                            </TableRow>\n                        )})}\n                </TableBody>\n            </Table>\n        </TableContainer>\n        {groups && groups.map((g, ix) =>\n            <Paper key={ix}><Button onClick={() => bookBoothClick(g)}>Book</Button></Paper>\n        )}\n        </>\n    )};\n\nexport default CalendarData;","import {Typography} from \"@mui/material\";\n\nexport const Loading = () => {\n    return <Typography variant=\"h6\">Authentication in progress...</Typography>\n}","import { Typography } from \"@mui/material\";\n\nexport const ErrorComponent = ({error}) => {\n    return <Typography variant=\"h6\">An Error Occurred: {error.errorCode}</Typography>;\n}","import React, {useCallback, useEffect} from \"react\";\nimport { MsalAuthenticationTemplate } from \"@azure/msal-react\";\nimport { InteractionType } from \"@azure/msal-browser\";\nimport { loginRequest } from \"../authConfig\";\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Paper from \"@mui/material/Paper\";\nimport Button from \"@mui/material/Button\";\nimport {StringParam, useQueryParam} from \"use-query-params\";\nimport CalendarData from \"../ui-components/calendar/CalendarData\";\nimport { Loading } from \"../ui-components/Loading\";\nimport { ErrorComponent } from \"../ui-components/ErrorComponent\";\nimport {cancelEvent, useCalendarService} from \"../utils/CalendarService\";\n\nconst CalendarContent = () => {\n    const [date] = useQueryParam('date', StringParam);\n    const wide = useMediaQuery('(min-width:750px)');\n    const calendarService = useCalendarService({startDate: date, days: wide ? 5 : 1});\n\n    useEffect(() => {\n        const timeoutId = setTimeout(() => calendarService.refresh(), 30*1000);\n        return () => {\n            clearTimeout(timeoutId);\n        }\n    }, [calendarService])\n\n    const cancelEventClick = useCallback(async eventId => {\n        await cancelEvent(eventId);\n        calendarService.refresh();\n    }, [calendarService])\n\n    return (\n        <Paper>\n            { calendarService && <>\n                <CalendarData calendarService={calendarService} />\n                <Button onClick={calendarService.refresh}>Refresh</Button>\n                { calendarService.calendarData && calendarService.calendarData.map(event => {\n                    return <li key={event.id}>\n                        <Button onClick={() => cancelEventClick(event.id)}>Cancel {event.subject}</Button>\n                    </li>\n                })}\n            </>\n            }\n        </Paper>\n\n    );\n};\n\nexport function Calendar() {\n    const authRequest = {\n        ...loginRequest\n    };\n\n    return (\n        <MsalAuthenticationTemplate \n            interactionType={InteractionType.Redirect}\n            authenticationRequest={authRequest} \n            errorComponent={ErrorComponent} \n            loadingComponent={Loading}\n        >\n            <CalendarContent />\n        </MsalAuthenticationTemplate>\n      )\n};","import { Switch, Route, useHistory } from \"react-router-dom\";\n// Material-UI imports\nimport Grid from \"@mui/material/Grid\";\n\n// MSAL imports\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { CustomNavigationClient } from \"./utils/NavigationClient\";\n\nimport { PageLayout } from \"./ui-components/PageLayout\";\nimport { Logout } from \"./pages/Logout\";\nimport {Calendar} from \"./pages/Calendar\";\n\nfunction App({ pca }) {\n  // The next 3 lines are optional. This is how you configure MSAL to take advantage of the router's navigate functions when MSAL redirects between pages in your app\n  const history = useHistory();\n  const navigationClient = new CustomNavigationClient(history);\n  pca.setNavigationClient(navigationClient);\n\n  return (\n    <MsalProvider instance={pca}>\n      <PageLayout>\n        <Grid container justifyContent=\"center\">\n          <Pages />\n        </Grid>\n      </PageLayout>\n    </MsalProvider>\n  );\n}\n\nfunction Pages() {\n  return (\n    <Switch>\n      <Route path=\"/logout\">\n          <Logout />\n      </Route>\n      <Route path=\"/\">\n          <Calendar />\n      </Route>\n    </Switch>\n  )\n}\n\nexport default App;\n","// If you need to support IE11 uncomment the imports below\n//import \"react-app-polyfill/ie11\";\n//import \"core-js/stable\"; \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { ThemeProvider } from '@mui/material';\nimport { QueryParamProvider } from 'use-query-params';\nimport { theme } from \"./styles/theme\";\nimport App from './App';\nimport {msalInstance} from \"./utils/MSALSetup\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <ThemeProvider theme={theme}>\n                <QueryParamProvider ReactRouterRoute={Route}>\n                    <App pca={msalInstance} />\n                </QueryParamProvider>\n            </ThemeProvider>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}